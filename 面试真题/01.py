# 简述类属性和对象属性的区别

class Cat():
    # 类属性
    name = '加菲'
    age = 2
    likes = ['鱼']

    def __init__(self, name, color):
        # 对象属性
        self.name = name
        self.color = color

cat = Cat('小白', 'baise')
# 调用类属性:
#   类调用, 直接得到类属性
#   对象调用, 先得到对象属性, 如果没有对象属性则获取类属性

# 调用对象属性
#   只能通过实例对象调用, 不能通过类调用
print(Cat.age)
print(cat.age)
print(Cat.name)
print(cat.name)
print('*'*100)

# 修改
Cat.name = '加菲2'
cat.name = '小白2'
print(Cat.name)
print(cat.name)
print('*'*100)

Cat.age = 20
print(Cat.age)
print(cat.age)
print('*'*100)
cat.age = 36
print(Cat.age)
print(cat.age)


### 类属性

# 1. **定义位置**：
#    - 类属性是在类的定义体中定义的，而不是在方法内部。它们在类的所有实例之间共享。

# 2. **作用范围**：
#    - 类属性是属于类本身的属性，不属于任何具体的实例。所有实例共享同一个类属性。

# 3. **访问方式**：
#    - 类属性可以通过类名和实例名来访问，但修改类属性时通常通过类名来进行，以避免混淆。



 

### 对象属性

# 1. **定义位置**：
#    - 对象属性是在类的实例方法中，通过 `self` 关键字定义的。每个实例都有自己独立的对象属性。

# 2. **作用范围**：
#    - 对象属性是属于具体实例的属性，每个实例都有自己的对象属性，互不影响。

# 3. **访问方式**：
#    - 对象属性只能通过实例名来访问，不能通过类名直接访问。



### 主要区别总结

# 1. **定义位置**：
#    - 类属性定义在类体中，而对象属性定义在实例方法中。

# 2. **作用范围**：
#    - 类属性在所有实例之间共享，所有实例访问和修改的都是同一个类属性。
#    - 对象属性是每个实例独有的，实例之间的对象属性互不影响。

# 3. **访问方式**：
#    - 类属性可以通过类名和实例名访问，但通常通过类名修改。
#    - 对象属性只能通过实例名访问和修改。

